<?php

namespace AppBundle\Controller;

use AppBundle\Entity\Animal;
use AppBundle\Entity\Blog;
use AppBundle\Form\AnimalType;
use AppBundle\Form\BlogType;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\BrowserKit\Request;
use Symfony\Component\HttpFoundation\File\UploadedFile;

class AddController extends Controller
{
    public function blogAction(Request $request)
    {
        $blog = new Blog();
        $form = $this->createForm(BlogType::class, $blog);
        $form->handleRequest($request);

        if($form->isSubmitted()&&$form->isValid())
        {
            $user = $this->getUser();
            $blog->setAuthor($user);
            $blog->setDate(new \DateTime());

            /** @var UploadedFile $image */
            $image = $blog->getImage();

            $fileName = $this->generateUniqueFileName().'.'.$image->guessExtension();

            // moves the file to the directory where brochures are stored
            $image->move(
                $this->getParameter('image.article.path'),
                $fileName
            );

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $blog->setImage($fileName);

            $em = $this->getDoctrine()->getManager();

            $em->persist($blog);

            return $this->redirect($this->generateUrl('blog'));

        }

        return $this->render('@App/add/blog.html.twig', array(
            "form" => $form->createView(),
        ));
    }

    public function productAction(Request $request)
    {
        $blog = new Animal();
        $form = $this->createForm(AnimalType::class, $blog);
        $form->handleRequest($request);

        if($form->isSubmitted()&&$form->isValid())
        {
            $user = $this->getUser();
            $blog->setAuthor($user);
            $blog->setDate(new \DateTime());

            /** @var UploadedFile $image */
            $image = $blog->getImage();

            $fileName = $this->generateUniqueFileName().'.'.$image->guessExtension();

            // moves the file to the directory where brochures are stored
            $image->move(
                $this->getParameter('image.article.path'),
                $fileName
            );

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $blog->setImage($fileName);

            $em = $this->getDoctrine()->getManager();

            $em->persist($blog);

            return $this->redirect($this->generateUrl('blog'));

        }
        return $this->render('@App/add/product.html.twig', array());
    }

    public function recipeAction()
    {
        //TODO recipeAddHandler
        return $this->render('@App/add/recipe.html.twig', array());
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
